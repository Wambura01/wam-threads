import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

/**
 * This function is generated by shadcn. The function `cn` is a TypeScript function that merges multiple class values into a single string.
 * @param {ClassValue[]} inputs - The `inputs` parameter is a rest parameter that allows you to pass in
 * multiple arguments of type `ClassValue`. The `ClassValue` type represents a class name or an object
 * with class names as keys and boolean values as values.
 * @returns The `cn` function is returning the result of calling the `twMerge` function with the result
 * of calling the `clsx` function with the `inputs` array as its argument.
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

/**
 * The function checks if a given string is a valid base64 encoded image data.
 * @param {string} imageData - The `imageData` parameter is a string that represents the image data in
 * base64 format.
 * @returns a boolean value. It will return true if the imageData string matches the base64 image data
 * format, and false otherwise.
 */
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

/**
 * The `formatDateString` function takes a date string as input and returns a formatted string with the
 * time and date in a specific format.
 * @param {string} dateString - The `dateString` parameter is a string representing a date. It can be
 * in any valid date format that can be parsed by the `Date` constructor, such as "2022-01-01" or
 * "January 1, 2022".
 * @returns a formatted string that includes the time and date. The time is in the format of
 * "hour:minute" with AM/PM, and the date is in the format of "month day, year". The time and date are
 * separated by a hyphen.
 */
export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

/**
 * The `formatThreadCount` function takes a number as input and returns a formatted string indicating
 * the number of threads.
 * @param {number} count - The `count` parameter is a number that represents the number of threads.
 * @returns a formatted string that represents the number of threads. If the count is 0, it returns "No
 * Threads". Otherwise, it returns the count padded with leading zeros, followed by the word "Thread"
 * if the count is 1, or "Threads" if the count is greater than 1.
 */
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}
